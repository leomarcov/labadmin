#!/usr/bin/env bash
#===================================================================================
# LABADMIN MAP
#         FILE: labadmin-script
#        USAGE: labdmin-script labadminPID
#
#  DESCRIPTION: Manage labadmin script execution in labadmin TUI mode
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2019.03
#      CREATED: 2025.03.20
#===================================================================================

#===============================================================================
#  LOAD LIBS
#===============================================================================
readonly labadmin_path="$(dirname $(dirname $(readlink -f "${0}")))"		# LABADMIN script root directory path
readonly lib_path="${labadmin_path}/lib/"									# LABADMIN LIB PATH
source "${lib_path}/labadmin_lib-admin"										# LABADMIN GLOBAL VARIABLES AND FUNCTIONS FOR ADMIN
source "${lib_path}/labadmin_lib"											# LABADMIN GLOBAL VARIABLES AND FUNCTIONS
source "${lib_path}/labadmin_lib-tmux"										# LABADMIN TMUX LIB
source "${lib_path}/labadmin_lib-tmp"										# LABADMIN TMP LIB
source "${lib_path}/labadmin_lib-script"									# LABADMIN SCRIPT LIB
source "${lib_path}/labadmin_lib-install"									# LABADMIN SCRIPT LIB
source "${lib_path}/labadmin_lib-auth"										# LABADMIN AUTHENTICATION LIB

#===============================================================================
# INIT
#===============================================================================
# SHOW VERSION
labadmin_show_version

# LABADMIN PID
readonly labadmin_PID="$1" 
ps -p "$labadmin_PID" &>/dev/null || { labadmin_error "Cant found labadmin main process $labadmin_PID"; read; tmux kill-session; }

# LOAD LABADMIN CONFIG FILE
labadmin_info "Loading labadmin config"
source "$config_path" || labadmin_error "ERROR: error loading labadmin config file: $config_path" 1

# LABADMIN TMP DIR INIT
labadmin_tmp-init
labadmin_tmp-vars-load ipadmin iface lab_file Lparam Wparam Fparam srvmode tmuxmode lab_id
readonly sshagent_path="${labadmin_tmp_path}/sshagent"      						# SSH Agent info 

# TMUX INIT PANEL
tmux_init-panel

# SERVER MODE
labadmin_info "Executing labadmin in $srvmode mode"

# LOAD SCRIPTS
labadmin_info "Loading scripts"
scripts_path="${scripts_path}/${srvmode}/"
load_scripts "$scripts_path"							# Load all scripts recursively

# INIT REMOTE AUTENTICACION
labadmin_info "Initializing $srvmode authentication"
auth_init


#===============================================================================
# MAIN LOOP
#===============================================================================
clear
labadmin_draw-box 1 1 "   SCRIPT EXECUTION"

while true; do
	# SHOW SCRIPT LIST
	select_script || continue

	# READ SCRIPT PARAMS
	read_params

	# LOAD SELECTED HOSTS
	unset shosts 
	while [ ! "$shosts" ]; do
		labadmin_tmp-vars-load ips shosts shosts_listen shosts_inactive
		[ "${scripts_type[$script_id],,}" = "inactive" ] && shosts="$shosts_inactive" || shosts="$shosts_listen"
		[ ! "$shosts" ] && read -e -p "$(echo -e '   ! No hosts selected\n     Select hosts in MAP panel and press '"${S_B}[ENTER]${S_R}") "
	done

	# SEND STATUS LOG
	labadmin_status-send "\n ${S_B}→ EXEC ${C_Y}${script_id}${S_R} to $(set -- $shosts; echo $#) hosts $([ "$exec_bg" ] && echo "($exec_bg)" | sed 's/sub/\&/' | sed 's/win/\&\&/')"

	# EXEC ADMIN 
	if [[ "${scripts_type[$script_id],,}" = admin* ]]; then
		script_type_state="1"
		exec_bg="" exec_script || continue
	fi

	# EXEC FOR EACH HOST		
	unset hosts_err hosts_ok
	for p in $shosts; do
		# EXEC BACKGROUND
		if [ "$exec_bg" = "sub" ]; then
			exec_script "$p" &
		# EXEC FOREGROUND
		else
			exec_script "$p" 
		fi
	done

	# EXEC ADMIN
	if [[ "${scripts_type[$script_id],,}" = *admin ]]; then
		script_type_state="2"
		exec_bg=""  exec_script 
	fi

	# SHOW ERRORS
	if [ ${#hosts_err[*]} -gt 0 ]; then
		echo -e "\n [${C_LR}*${S_R}] ${C_BR}ERRORS:${S_R} ${!hosts_err[@]}"
		labadmin_status-send "${S_B}← EXEC ${C_R}${script_id}${S_R} ERROR (${#hosts_err[@]} errors)"
	elif [ ! "$exec_bg" ]; then
		labadmin_status-send "${S_B}← EXEC ${C_G}${script_id}${S_R} OK"
	fi


	# CONTINUE
	if [ "$exec_bg" = win ]; then
		read -s -n 1 -p "$(echo -e "\n${S_B}[ENTER] to continue or [c] to close panels${S_R}")" c; echo -e "\n"
		[ "$c" = c ] && tmux_close-windows $shosts

	else 
		read -s -e -p "$(echo -e "\n${S_B}[ENTER] to continue${S_R}")"; echo -e "\n"	
	fi
	
	unset script_id exec_bg shosts
done