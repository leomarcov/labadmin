#!/usr/bin/env bash
#===================================================================================
# LABADMIN CONTROLLER
#         FILE: labadmin
#        USAGE: labadmin [-l lab_config] [-i iface] [-r range] [-a script] [-1 value1] [-2 value2]...
#
#  DESCRIPTION: Admin remotely hosts in a computer lab environment
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	    LICENSE: GNU General Public License v3.0
#      VERSION: 2019.04
#      CREATED: 16.02.2017
#=================================================================================== 

#===============================================================================
#  LOAD LIBS
#===============================================================================
readonly labadmin_path="$(dirname $(readlink -f "${0}"))"			# LABADMIN script root directory path
readonly lib_path="${labadmin_path}/lib/"									# LABADMIN LIB PATH
source "${lib_path}/labadmin_lib"											# LABADMIN GLOBAL LIB
source "${lib_path}/labadmin_lib-admin"									# LABADMIN ADMIN LIB
source "${lib_path}/labadmin_lib-tmux"										# LABADMIN TMUX LIB
source "${lib_path}/labadmin_lib-tmp"										# LABADMIN TMP LIB
source "${lib_path}/labadmin_lib-install"									# LABADMIN INSTALL LIB





#=== FUNCTION ==================================================================
#        NAME: help
# DESCRIPTION: Show help and exit
# PARAMETERS:
#	[$1]: exit code
#===============================================================================
function help() {
	echo -e "  Labadmin TUI
   ${S_B}$(basename $0)${S_R} [-l ${S_U}lab_config${S_R}] [-i ${S_U}face${S_R}] [-W|-L] [-F]

  OPTIONS
   ${S_B}-l ${S_U}lab_config${S_R}
\tLab config filename to use
\tLab config files must be placed in ${S_B}labs/${S_R} directory
\tWhen not specified ${S_B}default${S_R} file is used.

   ${S_B}-i ${S_U}iface${S_R}
\tNetwork interface to use. Overrides iface variable in labadmin config file.

   ${S_B}-W ${S_R}
\tForce Windows WINRM server mode. Overrides srvmode variable in lab config file.

   ${S_B}-L ${S_R}
\tForce Linux SSH server mode. Overrides srvmode variable in lab config file.

   ${S_B}-F ${S_R}
\tForce continue even check dependencies fail
"
	exit $1
}




#=== FUNCTION ==================================================================
#        NAME: check_params
# DESCRIPTION: Checks input parameters and load values
# PARAMETERS:
#	$@	All parameter from command line
#===============================================================================
function check_params() {
	while getopts ":hl:i:WLFv" o
	do
		case $o in
			h) hparam=1; help 0 ;;
			l) # -l:LAB
				lparam=1
				lab_id="$OPTARG"
				[ "${lab_id:0:1}" = "-" ] && labadmin_error "Param -l needs a valid lab ID" 1
				;;
			i) # -i:IFACE
				iparam=1
				piface="$OPTARG"
				;;
			W) # -W:WINRM mode
				Wparam=1;
				;;
			L) # -L:SSH mode
				Lparam=1;
				;;
			F) # -F: force exec missing dependencies
				Fparam=1
				;;
			v) # -v: version
				labadmin_show_version
				exit 0
				;;				
			\?)
				labadmin_error "Unknown option: -$OPTARG" 1
				;;
		esac
	done
}




#===============================================================================
# INITIALIZATION
#===============================================================================
# CHECK PARAMETERS
check_params "$@"

# SHOW VERSION
labadmin_show_version

# CHECK ROOT
[ ! "$Fparam" ] && [ "$EUID" -eq 0 ] && labadmin_error "Labadmin cant be exec as root" 1

# LOAD LABADMIN CONFIG FILE
labadmin_load-config-file

# LOAD LAB FILE
default_lab_path="${labadmin_path}/conf/lab.default"
[ ! "$lab_id" ] && [ -r "$default_lab_path" ] && lab_id=$(cat "$default_lab_path" | xargs)		# Get defaul lab
if [ ! "$lab_id" ]; then
		labadmin_error "Lab not defined"
		echo -e "AVAILABLE LABS: $(ls "${labs_path}" | tr "\n" " ")"
		echo -e "  * Config default lab in ${S_B}$default_lab_path${S_R}"
		echo -e "  * Or use ${S_B}-l${S_R} param"
		exit 1
fi
lab_file="${labs_path}/${lab_id}"
[ ! -r "$lab_file" ] && labadmin_error "Can't access lab config file: $lab_file" 1

# CHECK ADMIN DEPENDENCIES
check_dependencies "noinstall" "scripts_admindeps" >/dev/null
if [ $? -ne 0 ]; then
	if [ ! "$Fparam" ]; then
		labadmin_error "Some dependencies was not found"
		echo "$od" | tail -n +2
		echo -e "Install dependencies: ${S_B}${labadmin_path}/install -A -D ask${S_R}" | tr -s "/"
		echo -e "Or use ${S_B}labadmin -F${S_R} parameter to force exec"
		exit 1
	else
		labadmin_error "Some dependencies was not found. Continue in force mode (-F)"; read
	fi
fi

# IP-MAC ADMIN
[ "$iparam" ] && iface="$piface"
ipadmin="$(labadmin_ip "$iface")"
! [ "$ipadmin" ] && labadmin_error "ERROR: cant get IP from iface $iface\nCheck iface config in $config_path or use -i param" 1
macadmin="$(labadmin_mac "$iface")"

# TMP INITIALIZATION
readonly labadmin_PID="$$"												# set labadmin_PID
labadmin_tmp-init															# initialize tmp directories
labadmin_generate-autocomplete										# initialize autocomplete directory

# SERVER MODE
if [ "$Lparam" ]; then
	srvmode="ssh";
elif  [ "$Wparam" ]; then
	srvmode="winrm";
elif [ ! "$srvmode" ]; then
	srvmode="ssh"															# Default server mode ssh
fi


# CHECK TMUX MODE: full|compact
wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz &> /dev/null && sleep 0.2
[ "$COLUMNS" -ge 140 ] && tmuxmode="full" || tmuxmode="compact"		# tmuxmode=full for tmux in 3panles, tmuxmode=compact for tmux in 3 windows

# EXEC LABADMIN-TUI
labadmin_tmp-vars-save ipadmin macadmin lab_file iface Lparam Wparam Fparam srvmode tmuxmode lab_id
[ "$tmuxmode" =  full ] && tmux_create-session-panels || tmux_create-session-windows








