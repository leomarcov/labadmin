#!/usr/bin/env bash
#===================================================================================
# LABADMIN SCRIPT LIB
#         FILE: labadmin_script
#  DESCRIPTION: labadmin lib for load and select scripts
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#===================================================================================

#### EXTERNAL VARIABLES USED
# scripts_path
# shosts_listen
# ips[]
# log_path
# ipadmin
# labadmin_script
# labadmin_cmd
# cofig_id
# Sparam
# p0 p1 p2 p3 p4 p5 p6 p7 p8 p9
# p0param p1param p2param p3param p4param p5param p6param p7param p8param p9param

#### GLOBAL VARIABLES
declare -A scripts_desc					# Associative array indexed by script_id with scripts descriptions
declare -A scripts_type 				# Associative array indexed by script_id with scripts types
declare -A scripts_file 				# Associative array indexed by script_id with scripts file paths
declare -A scripts_bg 					# Associative array indexed by script_id with scripts background configs
declare -A scripts_parent				# Associative array indexed by script_id with scripts parent menu (if nested script)
declare -A scripts_admindeps			# Associative array indexed by script_id with admin dependencies
declare -A scripts_hostdeps				# Associative array indexed by script_id with host dependencies
unset script_id							# Current script id (name of file without extension) selected to exec
unset exec_bg							# Current background exec of selected script: sub|win|<empty>
unset hosts_err							# Array with host numbers with exit error exist status in current script
unset hosts_ok							# Array with host numbers with no exit error exist status in current script



#=== FUNCTION ==================================================================
# NAME: load_scripts
# DESCRIPTION: for info of each script file (desc, type, bg) in arrays
# PARAMETERS:
#	$1	path where search scripts recursvely or single file to load
#
# GLOBAL VARIABLES WRITTEN
#	scripts_desc[]
#	scripts_file[]
#   scripts_type[]
#	scripts_bg[]
#	scripts_parent[]
#===============================================================================
function load_scripts() {
	local search_path="$1"
	[ ${#scripts_file[*]} -gt 0 ] && return							# Exit if script was loaded previusly
	
	# DIRECTORY
	if [ -d  "$search_path" ]; then
		local IFS=$'\n\t'
		for s in $(find "$search_path" -type f); do
			source "$s" "--load-scriptinfo"
		done
	# FILE
	elif [ -f "$search_path" ]; then
		source "$search_path" "--load-scriptinfo"
	else
		labadmin_error "Can't load scripts from $search_path" 
	fi
}



#=== FUNCTION ==================================================================
# NAME: load_scriptinfo
# DESCRIPTION: add script info in asociative scripts arrays.
# 	This function is called for each script for autoregister his information
#
# PARAMETERS
#	$1	script_id
#	$2	script_desc
#	$3	script_type
#	$4	script_bg
#	$5	admin-dependencies
#	$6	host-depedences
#
# GLOBAL VARIABLES WRITTEN
#	scripts_desc[]					Description of the script file
#	scripts_type[]					Type of the script file
#	scripts_bg[] 					Background config: deny, force sub, force win, sub, win or empty)
#	scripts_file[]					Path of the script file
#	scripts_parent[]				Scriptid of parent script menu (if a child script)
#	scripts_admindeps[]				List of admin dependencies
#	scripts_hostdeps[]				Lists of host dependencies
#===============================================================================
function load_scriptinfo() {
	local script_id="$1"
	local script_desc="$2"
	local script_type="$3"
	local script_bg="$4"
	local script_admindeps="$5"
	local script_hostdeps="$6"
	local script_file="${scripts_path}/${script_id}"
	local script_parent="${script_id%/*}"
	[ "${script_parent}" = "${script_id}" ] && script_parent=""

	# CHECK SCRIPT FILE
	[ ! -r "$script_file" ] && labadmin_error "Can't read script file $script_file" 1
	# CHECK SCRIPT TYPE
	[[ "${script_type}" != @(ssh|local|inactive|admin+local+admin|admin+local|local+admin|admin+ssh+admin|admin+ssh|ssh+admin|ssh+local|local+ssh|ssh&local|winrm-ps|winrm-cmd|menu) ]] && labadmin_error "${script_id}: unknown script type ${script_type}${S_R}" 1


	scripts_desc["$script_id"]="$script_desc"
	scripts_type["$script_id"]="$script_type"
	scripts_file["$script_id"]="$script_file"
	scripts_bg["$script_id"]="$script_bg"
	scripts_parent["$script_id"]="$script_parent"
	[ "$script_admindeps" ] && scripts_admindeps["$script_id"]="$script_admindeps"
	[ "$script_hostdeps" ] && scripts_hostdeps["$script_id"]="$script_hostdeps"
}




#=== FUNCTION ==================================================================
# NAME: select_script
# DESCRIPTION: 	shows script list (main scripts or submenu scripts) and ask for
#	script to exec.
#   The script is deal as parameter 0 (saved in p0 variable).
#
# PARAMETERS
#	$1		Current folder selected for script
#
# GLOBAL VARIALBES WRITTEN
#	script_id 		Script id selected
#	exec_bg			Type of background exec (sub, win or empty)
#===============================================================================
function select_script() {
	local script_current="$1"
	[ ! "$script_current" ] && unset exec_bg				# First call unset background config
	[ "$script_current" = "." ] && unset script_current		# Current dir . equal to empty

	# GENERATE MENU LIST
	local IFS=$'\n\t'
    local list="\n" listf listd
    local regex=""
	for f in $(ls "${scripts_path}/${script_current}/"); do
		[ "$f" = "dir" ] && continue
		s_id="${script_current:+${script_current}/}${f}"
		# If no IPs selected only display inactive scripts:
		[ "${shosts_listen[*]}" = "" ] && [ "${scripts_type[$s_id],,}" != "inactive" ] && continue
		# If script is a menu (directory):
		if [ -d "${scripts_path}/${script_current}/${f}" ]; then
			listd="${listd:+${listd}\n}${f}/ ${scripts_desc[$s_id]}"
		# If script is a file
		else
			local script_desc="${scripts_desc[$s_id]}"
			[ "${dependence_errors[$s_id]}" ] && script_desc="${C_BR}${script_des} (!)${S_R}"	# Mark scripts with missing dependencies 
			listf="${listf:+${listf}\n}${f} ${alert_dependence_start}${script_desc}${alert_dependence_end}"
		fi
	done
	list="${listd}\n${listf}"	# Sort directories first and files after

	unset script_id
	while [ ! "$script_id" ]; do
		# READ SCRIPT AS PARAM
		local help="    ${C_N}Action options:${S_R}
      ${S_B}poweroff${S_R}     Exec action poweroff
      ${S_B}poweroff&${S_R}    Exec action poweroff in background
      ${S_B}conf/${S_R}        Enter to conf menu
      ${S_B}cd ..${S_R}        Go to upper menu
      ${S_B}dir${S_R}          List scripts of current menu"
		regex=".*"
		cd "${scripts_path}/${script_current}/"
		read_param "${script_current:-/}" "0" "$list" "" "$regex" "$help"

		# P0: remove starting cd
		p0="$(echo "$p0" | sed 's/^cd *//')"
		# SCRIPT_ID: curret path + p0 removing final space or /
		script_id="$(echo "${script_current:+${script_current}/}${p0}" | sed "s/[/ ]$//")"

		# ACTION EMPTY: return 1 for reload map
		if [ ! "$script_id" ]; then
			return 1
		# ACTION exit|quit: exit script
		elif [[ "${p0,,}" == @(exit|quit) ]]; then
			exit 0
		# ACTION LIST: list menu script again
		elif [[ "${p0}" = @(dir|ls) ]]; then
			select_script "$script_current"
			return
		# ACTION PARENT
		elif [ "${p0}" = ".." ]; then
			if [ ! "$script_current" ]; then
				select_script "$script_current"
			else
				select_script "$(dirname "$script_current")"
			fi
			return
		fi

		# Check if action in background
		if [ "${script_id: -1}" = "&" ]; then
			script_id="$(echo ${script_id:0: -1} | xargs)"		# Remove final & and trim spaces
			exec_bg="sub"
		fi
		# Check script_bg force
		[[ "${scripts_bg[$script_id]}" == *force* ]] && exec_bg="$(echo "${scripts_bg[$script_id]}" | sed 's/[^[:alpha:]]*force[^[:alpha:]]*//g')"

		# ACTION: if p0param selected script must be a file
		if [ "$p0param" ] && [ ! -f "${scripts_file[$script_id]}" ]; then
			labadmin_error "    ! Script ${script_id} not found"
			exit 1
		fi
		# ACTION: if script not exists show error and list menu again
		if [ ! "${scripts_file[$script_id]}" ]; then
			labadmin_error "    ! Script ${script_id} not found"
			select_script "$script_current"
			return
		fi

		# Check script_bg deny
		if [ "$exec_bg" ] && [ "${scripts_bg[$script_id]}" = "deny" ]; then
			labadmin_error "    Action ${script_id} can't be runned in background\n"
			unset script_id exec_bg
			continue
		# Check script_bg win
		elif [ "$exec_bg" ] && [[ "${scripts_bg[$script_id]}" == *win* ]];	then
			if [ ! "$DISPLAY" ]; then
				labadmin_error "    Action ${script_id} can't be runned in background in text environment\n"
				unset script_id exec_bg
				continue
			fi
			exec_bg="win"
		fi

		# If p0param exists exit if no script_id selected
		if [ "$p0param" ] && [ ! "$script_id" ]; then
			 echo -e " [${C_LR}*${S_R}] Invalid action $script_id\n"
			 exit 1
		fi

		# DIRECTORY SELECTED: continue next selection
		if [ -d "${scripts_path}/${script_id}/" ]; then
			select_script "$script_id"
			return
		fi

	done

	# If found dependence errors in selected script show warning
	[ "${dependence_errors[$script_id]}" ] && labadmin_error "    WARNING: Selected script has missing dependencies: ${dependence_errors[$script_id]}"
	# Prevent recursive loop when call another instance of labadmin
	[ "$Sparam" ] && unset exec_bg  		

	return 0
}




#=== FUNCTION ==================================================================
# NAME: read_params
# DESCRIPTION: read script params calling read_param function (on the script) and
# 	if current action is a menu script show subscripts list and read script for
#	exec and params
#
# GLOBAL VARIABLES WRITTEN
#	script_id
#===============================================================================
function read_params() {
	# Reset params
	[ ! "$p1param" ] && unset p1
	[ ! "$p2param" ] && unset p2
	[ ! "$p3param" ] && unset p3
	[ ! "$p4param" ] && unset p4
	[ ! "$p5param" ] && unset p5
	[ ! "$p6param" ] && unset p6
	[ ! "$p7param" ] && unset p7
	[ ! "$p8param" ] && unset p8
	[ ! "$p9param" ] && unset p9

	# READ SCRIPT PARAMS
	source "${scripts_file["$script_id"]}" --readparams
}



#=== FUNCTION ==================================================================
# NAME: show_menulist()
# DESCRIPTION: Show a menu list formatted in two columns
# PARAMETERS
#   $1  Text with menu in two columns
#===============================================================================
function show_menulist() {
    local text="$(echo -e "$1")"
    local left_margin="    "     # Space at left of each lines
    local col_width=16            # With of first column
    local IFS=$'\n'
    local menu=""
    for l in $text; do
        local opt="$(echo "$l" | awk '{print $1}')"
		[ ! "$opt" ] && { menu="${menu}\n"; continue; }
		local desc="$(echo "$l" | awk '{$1=""; print $0}')"
        local space=$((${col_width}-${#opt}))
		if [ "${opt: -1}" = "/" ]; then opt="[${C_LB}${opt}${C_D}]"
		else opt="[${C_LY}${opt}${C_D}]"; fi
        menu="${menu:+${menu}\n}${left_margin}${opt}$(seq -s" " "$space" | tr -d "[0-9]")${desc}"
    done
    echo -e "$menu"
}




#=== FUNCTION ==================================================================
# NAME: read_param
# DESCRIPTION: ask user for a parameter and save it in $pX variable (X=1,2,3...)
#	If param was fixed in command line only show it
#	Checks param format con regex
# PARAMETERS
#   $1	Script ID
#	$2	Parameter number
#   $3	Parameter description to show in read (if multiple lines show menu selection)
#	$4	Default parameter value
#   $5	Regular expresión for check param
#   $6  Parameter help
#
# GLOBAL VARIABLES WRITTEN
#	p0	parameter 0
#	p1	parameter 1
#	p2	parameter 2
#	p3	parameter 3
# 	p4	parameter 4
#	p5	parameter 5
# 	p6	parameter 6
#	p7	parameter 7
#	p8	parameter 8
#	p9	parameter 9
#===============================================================================
function read_param() {
	local script_id="$1"
	local np="$2"
	local desc="$3"
	local default="$4"
	local regexp="$5"
	local help="$6"

	# Param desc multiline: show as menu list
	if [ "$(echo -e "$desc" | wc -l)" -gt 1 ]; then
		if ! eval [ "\$p${np}param" ]; then 	# No fixed param from command line
			show_menulist "$desc"
			echo
		fi
		desc="Action"
	fi

	local vp cursor_col
	while true; do
        if ! eval [ "\$p${np}param" ]; then   				# No fixed param from command line
			### COMPOSE PROMPT
			# If script_id is a file in / -> color yellow
			local scriptid_color="${C_LY}$script_id${C_D}"
			# If script_id is a menu -> color blue
			if [ "${scripts_type["$script_id"]}" = "menu" ] || [ "$script_id" = "/" ]; then scriptid_color="${C_LB}$script_id${C_D}"
			# If script_id is a file inside a directory -> dir in blue and file in yellow
			elif [ "${script_id#*/}" != "$script_id" ]; then scriptid_color="${C_LB}$(dirname "$script_id")/${C_LY}$(basename "$script_id")${C_D}"; fi
			local ps_read="  > [${scriptid_color}$([ "$exec_bg" ]&&echo "&")] ${S_U}${desc}${S_R}:"
			ps_read="$(echo -e "$ps_read")"

			# Read param from keyboard
            echo -en "$ps_read"
            eval read -r -e -p \" \" "p${np}"				# read -e allow TAB completion, read -r avoid delete \x in special chars
        fi
        eval vp="\$p${np}"

        # Default value if parameter is empty
        if [ ! "$vp" ] && [ "$default" ]; then
        	eval p${np}=\""$default"\"
        	vp="$default"
        	cursor_move-up 1
			cursor_col=$(echo -e "$ps_read"| tail -1 | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | wc -m)  # sed remove colors and wc count horizontal space
			cursor_move-right "$((cursor_col))"
        	echo "$default"
        fi

        # Help
        if [ "$vp" ] && [ "$vp" = "h" ]; then
            if [ "$help" ]; then
            	echo -e "$help\n"
            else
            	echo -e "    ${C_N}No help for this parameter${S_R}\n"
            fi
            continue
        fi

        # Format check
        if [ "$regexp" ] && ! echo "$vp" | grep -Ei "$regexp"&>/dev/null; then
            echo -e "    ${C_LR}! Format error${S_R}. Accepted: $regexp"
			echo
            eval [ \$p${np}param ] && unset p${np}param
            continue
        fi
        return
    done
}





#=== FUNCTION ==================================================================
# NAME: exec_script
# DESCRIPTION: exec current script $script_id located in $scripts_path in local 
#              or remote
# PARAMETERS
#	$1	nhost 				host number where exec the script (empty if admin)
#
# GLOBAL VARIALBES WRITTEN
#   hosts_ok[]		host with exit code 0 when execution ends
#   hosts_err[]		host with exit code !=0 when execution ends
#===============================================================================
function exec_script() {
	local nhost="$1"
	local iphost=${ips["$nhost"]}   
	local script_file="${scripts_file[$script_id]}"
	local script_type="${scripts_type[$script_id]}"

	# SHOW HEADER
	echo -e "\n┌─── ${S_B}[${nhost:-ADMIN}] ${C_LB}${iphost:-LOCALHOST}${C_D} → EXEC $script_id${S_R} $(seq -s"─" $((${COLUMNS}-17-${#nhost}-${#iphost}-${#script_id}$([ ! "$nhost" ] && echo "-5")$([ ! "$iphost" ] && echo "-9")))| tr -d "[0-9]")┐"

	#### EXEC BACKGROUND START (prepare output)
	[ "$exec_bg" = "sub" ] && stdout_nhost start "$nhost"	


	#### EXEC WIN
	if [ "$exec_bg" = "win" ]; then
		exec_script_win "$nhost"
		return $?
	#### EXEC LOCAL 
	elif [ ! "$nhost" ] || [[ "${script_type,,}" = @(local|inactive|admin+local+admin|admin+local|local+admin) ]]; then
		exec_script_local "$nhost"
		out=$?
	#### EXEC SSH AND THEN LOCAL
	elif [ "$script_type" = "ssh+local" ]; then
		exec_script_ssh "$nhost"
		out=$?		
		if [ "$out" = 0 ]; then
			exec_script_local "$nhost"
			out=$?
		fi
	#### EXEC LOCAL AND THEN SSH
	elif [ "$script_type" = "local+ssh" ]; then
		exec_script_local "$nhost"
		out=$?		
		if [ "$out" = 0 ]; then
			exec_script_ssh "$nhost"
			out=$?
		fi	
	#### EXEC SSH AND LOCAL SIMULTANEOUSLY
	elif [ "$script_type" = "ssh&local" ]; then
		exec_script_ssh "$nhost" &
		exec_script_local "$nhost"
		out=$?		
	#### EXEC SSH
	elif [ "$nhost" ] && [[ "${script_type,,}" = @(ssh|admin+ssh+admin|admin+ssh|ssh+admin) ]] ; then
		exec_script_ssh "$nhost"
		out=$?		
	#### EXEC REMOTE WINRM-PS
	elif [ "$script_type" = "winrm-ps" ]; then
		exec_script_winrm-ps "$nhost"
		out=$?
	#### EXEC REMOTE WINRM-cmd
	elif [ "$script_type" = "winrm-cmd" ]; then
		exec_script_winrm-cmd "$nhost"
		out=$?
	else
		labadmin_error "Incorrect script type $script_type for $script_file" 
		out=1
	fi

	#### EXEC BACKGROUND END (restore output)
	[ "$exec_bg" = "sub" ] && stdout_nhost end "$nhost"
	
	# EXIT CODE AND FOOTER
	if [ "$out" -ne 0 ]; then
		if [ "$exec_bg" = "sub" ] || [ "$Sparam" ]; then labadmin_beep "error1"; fi
		[ "$nhost" ] && hosts_err[$nhost]=$out  
		echo -e "${S_R}└─── ${S_B}[${nhost:-ADMIN}] ${C_LB}${iphost:-LOCALHOST}${C_D} ← ${C_LR}ERROR ($out)${C_D}${S_R} $(seq -s"─" $((${COLUMNS}-22-${#nhost}-${#iphost}$([ ! "$nhost" ] && echo "-5")$([ ! "$iphost" ] && echo "-9")))| tr -d "[0-9]")─┘"
	else
		[ "$nhost" ] && hosts_ok[$nhost]=$out  
		echo -e "${S_R}└─── ${S_B}[${nhost:-ADMIN}] ${C_LB}${iphost:-LOCALHOST}${C_D} ← ${C_LG}OK${C_D}${S_R} $(seq -s"─" $((${COLUMNS}-15-${#nhost}-${#iphost}$([ ! "$nhost" ] && echo "-5")$([ ! "$iphost" ] && echo "-9")))| tr -d "[0-9]")─┘"
	fi

	return $out
}


#=== FUNCTION ==================================================================
# NAME: labadmin_export_vars_code
# DESCRIPTION: for each variable name to export when exec script show
#              labadmin_<variable_name>=<variable_value> 
#
#              Variables exported are:
#                labadmin_iface
#                labadmin_sshuser
#                labadmin_sshport
#                labadmin_ipadmin
#                labadmin_iphost
#                labadmin_nhost
#                labadmin_script_type
#                labadmin_winrmuser
#                labadmin_winrmport
#				 labadmin_shosts_listen
#                labadmin_machost
#				 labadmin_script_type_state
#
#===============================================================================
function labadmin_export_vars_code() {
	vars_export="iface sshuser sshport ipadmin iphost nhost script_type winrmuser winrmport shosts_listen script_type_state"

    for vn in $vars_export; do
        echo "labadmin_${vn}=\"${!vn}\""
    done

    echo "labadmin_machost=\"${macs[$nhost]}\""
}


#=== FUNCTION ==================================================================
# NAME: exec_script_win
# DESCRIPTION: exec current $script_id in a new labadmin instance opening a 
#              new terminator windows
# PARAMETERS
#	$1	nhost where exec the script
#===============================================================================
function exec_script_win() {
	local nhost="$1"
	
	local labadmin_cmd="\"$labadmin_script\" -S $([ "$lab_id" != "default" ]&&echo "-l \"$lab_id\"") -r \"$nhost\" -a \"$script_id\" $([ ! -z "${Wparam+set}" ]&&echo " -W")$([ ! -z "${iparam+set}" ]&&echo " -i \"$iface\"")$([ ! -z "${p1+set}" ]&&echo " -1 \"$p1\"")$([ ! -z "${p2+set}" ]&&echo " -2 \"$p2\"")$([ ! -z "${p3+set}" ]&&echo " -3 \"$p3\"")$([ ! -z "${p4+set}" ]&&echo " -4 \"$p4\"")$([ ! -z "${p5+set}" ]&&echo " -5 \"$p5\"")$([ ! -z "${p6+set}" ]&&echo " -6 \"$p6\"")$([ ! -z "${p7+set}" ]&&echo " -7 \"$p7\"")$([ ! -z "${p8+set}" ]&&echo " -8 \"$p8\"")$([ ! -z "${p9+set}" ]&&echo " -9 \"$p9\"")"
	labadmin_info "$labadmin_cmd"
	terminator -m -T "labadmin - ${script_id}" --new-tab -e "echo -e \"${C_BB}${labadmin_cmd}${S_R}\"; ${labadmin_cmd}; read" &>/dev/null &
}


#=== FUNCTION ==================================================================
# NAME: exec_script_ssh
# DESCRIPTION: exec current $script_id script in remote host using SSH
#              lib/labdamin_global and labadmin_export_vars_code is 
#              exec before the script code
#
# PARAMETERS
#	$1	nhost where exec the script
#===============================================================================
function exec_script_ssh() {
	local nhost="$1"
	local iphost=${ips[$nhost]}
	local script_file="${scripts_file[$script_id]}"

	( 
		cat "${lib_path}/labadmin_lib" 
		script_type="ssh" labadmin_export_vars_code
		cat "$script_file" 
	) | ssh -T $sshuser@$iphost -p $sshport -oStrictHostKeyChecking=no 'cat | bash /dev/stdin' "'""$p1""'" "'""$p2""'" "'""$p3""'" "'""$p4""'" "'""$p5""'" "'""$p6""'" "'""$p7""'" "'""$p8""'" "'""$p9""'"
	
	return $?
}


#=== FUNCTION ==================================================================
# NAME: exec_script_local
# DESCRIPTION: exec current $script_id script in local  
#              lib/labdamin_global and labadmin_export_vars_code is 
#              exec before the script code
#
# PARAMETERS
#	$1	nhost where exec the script. If empty exec in admin mode
#===============================================================================
function exec_script_local() {
	local nhost="$1"
	local iphost=${ips["$nhost"]}
	local script_type="local"; 	[ ! "$nhost" ] && script_type="admin"
	local script_file="${scripts_file[$script_id]}"

	(
		source "${lib_path}/labadmin_lib"
		eval $(script_type="$script_type" labadmin_export_vars_code)
		source "$script_file" "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9" 	
	)

	return $?
}

#=== FUNCTION ==================================================================
# NAME: exec_script_winrm-ps
# DESCRIPTION: exec current $script_id script in remote host using WINRM Powershell
#              lib/labdamin_global and labadmin_export_vars_code is 
#              exec before the script code
#
# PARAMETERS
#	$1	nhost where exec the script
#===============================================================================
function exec_script_winrm-ps() {
	local nhost="$1"
	local iphost=${ips[$nhost]}
	local script_file="${scripts_file[$script_id]}"

	ps_script=$(
		source "${lib_path}/labadmin_lib"
		eval $(script_type="winrm-ps" labadmin_export_vars_code)	
		source "$script_file" "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
	)
	echo -en "${C_LB}"; echo -n "$ps_script"; echo -e "${C_D}"
	ps_script_line="$(echo "$ps_script" | sed -z 's/\n/; /g' | sed 's/"/\\"/g')"
	winrm-go -hostname "$iphost" -username "$winrmuser" -password "$winrmpass" 'powershell -command "&{'"$ps_script_line"'}"'	
	return $?
}

#=== FUNCTION ==================================================================
# NAME: exec_script_winrm-cmd
# DESCRIPTION: exec current $script_id script in remote host using WINRM CMD
#              lib/labdamin_global and labadmin_export_vars_code is 
#              exec before the script code
#
# PARAMETERS
#	$1	nhost where exec the script
#===============================================================================
function exec_script_winrm-cmd() {
	local nhost="$1"
	local iphost=${ips[$nhost]}
	local script_file="${scripts_file[$script_id]}"

	ps_script=$(
		source "${lib_path}/labadmin_lib"
		eval $(script_type="winrm-cmd" labadmin_export_vars_code)
		source "$script_file" "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
	)
	echo -en "${C_LB}"; echo -n "$ps_script"; echo -e "${C_D}"
	ps_script_line="$(echo "$ps_script" | sed -z 's/\n/ & /g' | sed 's/"/\\"/g')"
	winrm-go -hostname "$iphost" -username "$winrmuser" -password "$winrmpass" "$ps_script_line"
	return $?
}





#=== FUNCTION ==================================================================
# NAME: terminator_dbusconfig
# DESCRIPTION: set dbus config parameter in terminator user config to allow open
#	new tabs (with --new-tab parameter)
#
# PARAMETERS
#	[$1] 	true|false	(default true)
#===============================================================================
function terminator_dbusconfig() {
	local c="$1"
	[ "${c,,}" != "false" ] && c="true"

	if [ -w $HOME/.config/terminator/config ]; then
		sed -i "/[[:blank:]]*dbus[[:blank:]]*=/Id"  $HOME/.config/terminator/config		# Delete all dbus lines
		sed -i "/\[global_config\]/Ia\ \ dbus = ${c}"  $HOME/.config/terminator/config	# Add dbus=true line in global_config section
	fi
}




#=== FUNCTION ==================================================================
# NAME: stdout_nhost
# DESCRIPTION: config outout format to:
#	- Addding host number colored at starting each line (red background in stderr)
#
# PARAMETERS
#	$1: start/end
#	$2: nhost
#===============================================================================
function stdout_nhost() {
	case "$1" in
	start)
		local random_color=$((3+$RANDOM%2*6))$((2+$RANDOM%5))		# Color number: [3,9][2-6]
		#STDERR
		exec 9>&2
		exec 8> >(
		    while IFS='' read -r line || [ -n "$line" ]; do
		       echo -en "  ${S_R}\e[${random_color}m\e[41m[$2]${S_R}  "
			   echo "${line}"
		    done
		)
		#STDOUT
		exec 7>&1
		exec 6> >(
		    while IFS='' read -r line || [ -n "$line" ]; do
		       echo -en "  ${S_R}\e[${random_color}m[$2]${S_R}  "
			   echo "${line}"
		    done
		)
		exec 2>&8; exec 1>&6;
	;;
	end)
		exec 2>&9
		exec 1>&7
	;;
	esac
}
