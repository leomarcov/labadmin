#!/usr/bin/env bash
#===================================================================================
# LABADMIN IP LIB
#         FILE: labadmin_lib-ip
#  DESCRIPTION: labadmin lib for manage host ip discover and arp table
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2019.03
#      CREATED: 16.02.2017
#===================================================================================

#### EXTERNAL VARIABLES USED
# ips[]
# macs[]
# iface
# srvmode
# sshport
# winrmport

#### GLOBAL VARIABLES
unset ips				                      			# Array with all IPs found indexed by nhost
unset macs				                      			# Array with all macs of current config indexed by nhost
unset hosts_status		                      			# Array with last status of all hosts checked (inactive|listen|off) indexed by nhost
unset map_updates										# Last map updates list to show at right of the map



#=== FUNCTION ==================================================================
# NAME: search_ips
# DESCRIPTION: search all IPs and macs in local network and:
#	- Fills the ips[] array with IPs for each mac in array macs[]
#	- Fills hosts_status[] array for each IP with 3 possible values:
#       * inactive: host respond to arp-scan but no is listening to ssh port
#       * listen: host respond and is listening to ssh port
#       * off: host not respond to arp-scan
#   - Generate map_updates message
#
# GLOBAL VARIALBES WRITTEN
#	ips[]	    		IP for each mac in macs[] found in local network
#	hosts_status[]		Status of each host: listen, inactive, off
#===============================================================================
function search_ips() {
	local port="$(eval echo "\${${srvmode}port}")"		# ssh/winrm port
	unset map_updates

	# UPDATE ARP INFO
	[ "$tmuxmode" ] && print_map_prompt " ${C_N}Scanning ${iface}...${S_R}"	# Show notifiction messaage before map
	local arp_out="$(arp-scan -l -I $iface -q -r 1 -N -t ${scan_timeout:-500} 2>/dev/null)" 
	if [ $? -ne 0 ]; then
		if [ "$tmuxmode" ]; then
			print_map_prompt "${S_B}${C_R}! Failed to scan network hosts${S_R}"
			cursor_hide; read; cursor_show
		else
			labadmin_error '! Failed to scan network hosts' 1
		fi
		return 1
	fi
	arp_out="${arp_out}"$'\n'"${ipadmin}"$'\t'"${macadmin}"		# Add admin ip mac (allow select admin if is present in lab config file)


	# UPDATE IPs STATUS:
	#   inactive: found line "IP MAC inactive"
	#   listen: found "IP MAC"
	#   off: no found line with MAC
	for n in ${!macs[@]}; do
		local mac=${macs[$n]}
		[ ! "$mac" ] && continue
		local ip=$(echo "$arp_out" | grep -i "\b${mac}\b" | head -1)

		if [ "$ip" ]; then
			ips[$n]=$(echo $ip | awk '{print $1}')
			if nc -z -w 1 "$ip" "$port" &> /dev/null; then
				[ "$tmuxmode" ] && [[ "${hosts_status[$n]}" = @(off|inactive) ]] && register_map-update "$n" "up"
				hosts_status[$n]="listen"
			else
				[ "$tmuxmode" ] && [[ "${hosts_status[$n]}" = listen ]] && register_map-update "$n" "down"
				hosts_status[$n]="inactive" 
			fi
		else
			[ "$tmuxmode" ] && [[ "${hosts_status[$n]}" = @(listen|inactive) ]] && register_map-update "$n" "down"
			hosts_status[$n]="off"
		fi
	done

	[ "$tmuxmode" ] && print_map_prompt " > ${S_U}Select hosts${S_R}:"
}




