#!/usr/bin/env bash
#===================================================================================
# LABADMIN INSTALL LIB
#         FILE: labadmin_lib-install
#  DESCRIPTION: labadmin lib for install, uninstall and check dependencies
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2019.03
#      CREATED: 16.02.2017
#===================================================================================


#===============================================================================
#  INSTALL CONFIG
#===============================================================================
readonly dir_install="/opt/labadmin/"                   				# /opt/labadmin/
readonly labadmin_file="$dir_install/labadmin"         					# /opt/labadmin/labadmin
readonly labadmin_group="labadmin"   									# Group allowed to use labadmin	
readonly installers_path="$labadmin_path/lib/installers/"				# Installers path
declare -A dependence_errors											# Array with dependence errors in last check: dependence_errors[action_id]=dependencies(packages)...

# List of global labadmin dependencies                   																			
scripts_admindeps["labadmin-base"]="ssh(openssh-client|openssh-clients) systemctl(systemd) arp-scan awk ip beep tmux wmctrl" 		

# List of global host dependencies
scripts_hostdeps["labadmin-base"]="sshd(openssh-server) awk ip"





#=== FUNCTION ==================================================================
#        NAME: load_installer
# DESCRIPTION: load suitable installer in $installers_paths for current system
# EXIT CODE
#	0	if found suitable installer for current system
#	1	if no found suitable installer for current system
#===============================================================================
function load_installer() {
	for s in "$installers_path/"*; do
		source "$s" 
		installer_check && return 0
	done
	unset installer_name installer_check installer_install
	return 1
}




#=== FUNCTION ==================================================================
#        NAME: check_dependence
# DESCRIPTION: check one system dependence
# PARAMETERS:  
#	$1:	dependence posibilities (separated by |). 
#		if starts with / check if file exists
#		if starts with / and end with / check if directory exists
#		in other case check if command is in PATH (which)
#		Examples:
#			iptables 
#			chromium|chromium-stable
#			/etc/apt/sources.list|/etc/apt/sources.list.d/
#
# EXIT CODE:
#	0: if success checking dependence (if multi-possibility at least one ok)
#	1: if error checking dependence
#===============================================================================
function check_dependence() {
	dep="$1"		
	local d
	
	for d in $(echo "$dep" | tr "|" " "); do
		# Check directory
		if [ "${d:0:1}" = "/" ] && [ "${d: -1:1}" = "/" ]; then
			[ -d "$d" ] && return 0
		# Check file
		elif [ "${d:0:1}" = "/" ]; then
			[ -f "$d" ] && return 0
		# Check command in path
		else
			which "$d" &>/dev/null && return 0
		fi
	done

	return 1
}



#=== FUNCTION ==================================================================
#        NAME: check_admin_dependencies
# DESCRIPTION: check if dependencies in list are found in system
# PARAMETERS:  
#	$1: action to do when some dependence are needed
#		autoinstall:     autoinstall dependencies
#		noinstall:       no install dependencies
#		ask:             ask if install dependencies
#
#	$2:	array name with actions and dependencies (scripts_admindeps or scripts_hostdeps) 
#		Array index must be the module (script name)
#		Array content must be a list of depenences in format com1|com2|...(pack1|pack2|pack3)
#			Examples: 	crontab(cron) systemctl(systemd) awk
#						chrome|google-crome
#
# EXIT CODE
#	0 if check is ok
#	1 if any dependence has not found
#	2 if any dependence on labadmin-base module has not found
#===============================================================================
function check_dependencies() {
	local action="$1"
	local aname="$2"

	# CHECK DEPENDENCIES
	labadmin_info "Checking modules dependencies"
	local error_code=0 packages_error m d
	for m in $(eval echo \${!${aname}[*]}); do
		echo " $m"
		deps="$(eval echo \${${aname}[$m]})"
		local mod_errors=""
		for d in $deps; do
			com="$(echo "$d" | sed "s/([^ ]*)//g")"					# Filter only commands (remove packages): aaa|bbb(CCC|DDD) -> aaa|bbb
			pkg="$(echo "$d" | sed "s/^[^(]*//g" | tr -d "()")"		# Filter only packages (reomve commands): aaa|bbb(CCC|DDD) -> CCC|DDD
			[ ! "$pkg" ] && pkg="$com"								# If no package then use command name
			check_dependence "$com"
			if [ $? -ne 0 ]; then
				dependence_errors["$m"]="$deps"
				mod_errors="1"
				packages_error="${packages_error}${packages_error:+\n}$pkg"
				[  "$error_code" != "2" ] && error_code="$([ "$m" = "labadmin-base" ] && echo 2 || echo 1)"
				echo -e "    ${C_BR}${com}\r\e[50CFAIL!${S_R}" 1>&2
			fi
		done
		[ ! "$mod_errors" ] && echo -e "$(cursor_move-up 1)\r\e[50C${C_BG}OK${S_R}" 
	done
	if [ "${packages_error}" ]; then
		packages_error="$(echo -e "$packages_error" | sort -u | tr "\n" " ")"			# Delete duplicate package names
		echo -e "\nSuggested packages: ${S_B}${packages_error}${S_R}"
	fi

	# EXIT IF NO NEED INSTALL
	[ "$error_code" -eq 0 ] || [ "$action" = "noinstall" ] && return "$error_code"


	# TRY INSTALL 
	# Ask if install
	if [ "$action" = "ask" ]; then
		while true; do
			read -p "Try to install packages? (Y/n) " q
			[ ! "$q" ] && q="y"
			case "${q,,}" in
				y) break 					;;
				n) echo; return "$error_code"		;;
			esac
		done
	fi


	# Try load installer
	if [ ! "$installer_name" ]; then
		echo
		load_installer
		if [ $? -ne 0 ]; then
			labadmin_error "Can't find installer for your current system. Dependencies must be installed manually"
			return "$error_code"
		else
			echo -e "Installing using ${S_B}${installer_name}${S_R} installer..."
		fi
	fi

	# Check root
	[ "$(id -u)" -ne 0 ] && labadmin_error "Install must be runed as root" 1

	# Search packages in repositories
	local packages_error_notfound
	local packages_error_found
	for p in $packages_error; do
		# Single package name
		if [[ "$p" != *"|"* ]]; then
			installer_search "$p" && packages_error_found="${packages_error_found} $p" || packages_error_notfound="${packages_error_notfound} $p"
		# Multi package name
		else
			local mp_found=""
			for mp in $(echo "$p" | tr "|" " "); do
				installer_search "$mp" && mp_found="$mp" && break
			done
			[ "$mp_found" ] && 	packages_error_found="${packages_error_found} $mp_found" || packages_error_notfound="${packages_error_notfound} $p"
		fi
	done

	if [ "$packages_error_notfound" ]; then
		labadmin_error "Some packages are not available in system repositories"
		echo -e " Packages not found: ${C_BR}${packages_error_notfound}${S_R}"
		echo -e " Packages found: ${S_B}${packages_error_found:-none}${S_R}"
		
		if [ "$packages_error_found" ] && [ "$action" = "ask" ]; then
			while true; do
				read -p "Continue install? (Y/n) " q
				[ ! "$q" ] && q="y"
				case "${q,,}" in
					y) break 						;;
					n) echo; return "$error_code"	;;
				esac
			done
		fi
	fi

	# Install packages
	if [ "$packages_error_found" ]; then
		echo -e "Installing dependencies:${S_B}${packages_error_found}${S_R}"
		echo
		installer_install $packages_error_found
		echo
		check_dependencies "noinstall" "dependence_errors"
		return $?
	else
		echo
		return "$error_code"
	fi


}




#=== FUNCTION ==================================================================
# NAME: install_admin
# DESCRIPTION: install or reinstall admin script in $dir_install directory
#===============================================================================
function install_admin() {
	# CHECK ROOT
	[ $EUID -ne 0 ] && labadmin_error "Install must be runed as root" 1

	# DEPENDENCIES
	check_dependencies "ask" "scripts_admindeps"
	case "$?" in
	2)
		labadmin_error "Some dependencies in labadmin-base was not found\nIf continue labadmin could not work properly"
		while true; do
			read -p "Continue install (y/N) " q
			[ ! "$q" ] && q="n"
			case "$q" in
				y|Y) break 		;;
				n|N) return 1	;;
			esac
		done
	;;
	1)
		labadmin_info "Some module dependencies were not found. If continue afected modules could not work properly"
		while true; do
			read -p "Continue install (y/N) " q
			[ ! "$q" ] && q="n"
			case "$q" in
				y|Y) break 		;;
				n|N) return 1	;;
			esac
		done
	;;
	esac
	echo

	# INSTALL ADMIN
	labadmin_info "Creating $labadmin_group group"
	cat /etc/group | grep -q "^labadmin:" || groupadd "$labadmin_group"

	labadmin_info "Copying directory $dir_install"
	if [ $(readlink -f "$labadmin_path") != $(readlink -f "$dir_install") ]; then
		rm -rf "$dir_install"
		cp -r "$labadmin_path" "$dir_install"
	else
		echo "  Labadmin installation dir match install dir"
	fi

	labadmin_info "Setting install permissions"	
	chown -R root:"$labadmin_group" "$dir_install"
	find "$dir_install" -type f -exec chmod 640 {} \;
	find "$dir_install" -type d -exec chmod 650 {} \;
	chmod ug+x "${labadmin_file}"
	chmod ug+x "${labadmin_file}-cli"
	chmod ug+x "${dir_install}/install"
	chmod ug+x "${dir_install}/uninstall"	
	chmod ug+x "${dir_install}/bin/"*

	labadmin_info "Creating /usr/bin links"
	rm -rf /usr/sbin/labadmin /usr/sbin/labadmin-cli &> /dev/null
	ln -s "${labadmin_file}" "/usr/sbin/labadmin"
	ln -s "${labadmin_file}-cli" "/usr/sbin/labadmin-cli"

	labadmin_info "Activating SUID for arp-scan command"
	chmod u+s "$(which arp-scan)"

	labadmin_info "Creating log file: $log_path"
	touch "$log_path"
	chmod 660 "$log_path"
	chown :"$labadmin_group" "$log_path"

	labadmin_info "Copying desktop files"
	cp "$labadmin_path/desktop/labadmin.desktop" /usr/share/applications/
	chmod a+r /usr/share/applications/labadmin.desktop
	cp "$labadmin_path/desktop/labadmin.png" /usr/share/pixmaps/
	chmod a+r /usr/share/pixmaps/labadmin.png

	labadmin_info "\nINSTALL FINISHED!"
	installed_labs=$(ls "${labs_path}" 2>/dev/null| tr "\n" " ")
	labadmin_config_path="${labadmin_path}conf/labadmin.conf"
	echo -e " 1) SET PERMISSIONS: add users to ${S_B}${labadmin_group}${S_R} group for allow exec labadmin"
	[ ! -f "${labadmin_config_path}" ] && echo -e " 2) LABADMIN CONFIG: copy template config ${S_B}${dir_install}templates/labadmin.conf${S_R} to ${S_B}${dir_install}conf/labadmin.conf${S_R} and set labadmin config" || echo -e " 2) LABADMIN CONFIG: edit ${S_B}${dir_install}conf/labadmin.conf${S_R} and set labadmin global config and authentication"
	echo -e " 3) CONFIG LABS FILES: "
	[ ! "$installed_labs" ] && echo -e "    - No lab files installed\n    - Copy ${S_B}${dir_install}templates/labtest${S_B} to ${S_B}${dir_install}labs${S_R}, rename with lab name and edit it for each lab you need"
	[ "$installed_labs" ] && echo -e "    - Installed labs($(echo "$installed_labs"|wc -w)): ${S_B}${installed_labs}${S_R}\n    - Edit, create and delete labs files as you need"
	echo -e "    - Set default lab filename on file ${S_B}${dir_install}conf/lab.default${S_R}"
	echo
}




#=== FUNCTION ==================================================================
# NAME: install_host
# DESCRIPTION: config and install dependencies in host computer for control it
#===============================================================================
function install_host() {
	# CHECK ROOT
	[ $EUID -ne 0 ] && labadmin_error "Install must be runed as root" 1

	# LOAD LABADMIN CONFIG FILE
	labadmin_load-config-file

	# DEPENDENCIES
	check_dependencies "ask" "scripts_hostdeps"
	case "$?" in
	2)
		echo
		labadmin_error "Some dependencies in labadmin-base was not found\nPlease, install it and try again" 1
	;;
	1)
		echo
		echo "Some module dependencies were not found. If continue afected modules could not work properly"
		while true; do
			read -p "Continue install (y/N) " q
			[ ! "$q" ] && q="n"
			case "$q" in
				y|Y) break 		;;
				n|N) return 1	;;
			esac
		done
	;;
	esac
	echo


	# INSTALL HOST
	labadmin_info "Configuring openssh-server"
	sed -i "/^Port[[:blank:]]\+/Id" /etc/ssh/sshd_config; echo "Port $sshport" >> /etc/ssh/sshd_config
	sed -i "/^AllowUsers/Id" /etc/ssh/sshd_config; echo "AllowUsers root" >> /etc/ssh/sshd_config
	sed -i "/^PermitRootLogin/Id" /etc/ssh/sshd_config; echo "PermitRootLogin without-password" >> /etc/ssh/sshd_config
	sed -i "/^PubkeyAuthentication/Id" /etc/ssh/sshd_config; echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config
	sed -i "/^PasswordAuthentication/Id" /etc/ssh/sshd_config; echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
	sed -i "/^PrintMotd/Id" /etc/ssh/sshd_config; echo "PrintMotd no" >> /etc/ssh/sshd_config
	sed -i "/^PrintLastLog/Id" /etc/ssh/sshd_config; echo "PrintLastLog no">> /etc/ssh/sshd_config
	[ -f /etc/pam.d/sshd ] && sed -i '/motd/s/^/#/' /etc/pam.d/sshd
	ssh_service_name="$(systemctl list-units --type=service --all | egrep -o "\bssh(d)?\.service" | cut -f1 -d. | head -1)"
	systemctl enable "$ssh_service_name" || labadmin_error "ERROR: SSH server enable failed"
	systemctl restart "$ssh_service_name" || labadmin_error "ERROR: SSH server start failded"

	labadmin_info "Installing public key in /root/.ssh/authorized_keys"
	[ ! -d "/root/.ssh" ] && { mkdir /root/.ssh; chmod 700 /root/.ssh; }
	echo "$sshpubkey" |  tee /root/.ssh/authorized_keys
	chmod 600 /root/.ssh/authorized_keys

	echo
}


