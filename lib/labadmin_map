#!/usr/bin/env bash
#===================================================================================
# LABADMIN MAP LIB
#         FILE: labadmin_map
#  DESCRIPTION: labadmin lib for manage map and selected host range
#
#t       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#===================================================================================

#### EXTERNAL VARIABLES USED
# rparam
# rhosts
# ips[]
# macs[]
# hosts_status[]
# nr
# nc
# iface

#### GLOBAL VARIABLES
unset shosts			# List (space separated) with all selected hosts numbers (range expanded)
unset shosts_listen		# List (space separated) with all selected host numbers with IP and listen
unset shosts_inactive	# List (space separated) with all selected host numbers selected with no IP found
unset nupdate_map		# Counter of updates showed in right of the map


#=== FUNCTION ==================================================================
# NAME: draw_banner
# DESCRIPTION: draw startup banner
#===============================================================================
function draw_banner() {
	labadmin_lock_screen
	clear
	echo -e " ${S_R}${S_B}${C_N}┌"$(seq -s"─" $((8+$nc*6)) | tr -d "[0-9]")"┐"
	echo -e " │$(seq -s" " $(((12+$nc*6)/2-4)) | tr -d "[0-9]")${S_R}${S_B}LABADMIN ${S_B}${C_N} $(seq -s" " $(((10+$nc*6)/2-8)) | tr -d "[0-9]")│"
	echo -e " └"$(seq -s"─" $((15+$nc*6-7)) | tr -d "[0-9]")"┘"
	echo -en "${S_R}"
	[ "$labname" ] && echo -e "    ${S_B}${labname}${S_R}"
	labadmin_unlock_screen
}


#=== FUNCTION ==================================================================
# NAME: show_map_notification
# DESCRIPTION: show notification line befor map draw
# PARAMETERS
#	$1	Message
#===============================================================================
function show_map_notification() {
	local msg="$1"
	labadmin_lock_screen
	cursor_save
	cursor_move-pos 4 $((5+${nc}*6-${#msg}))
	echo -e "${C_N}$msg${S_R}"
	cursor_restore
	labadmin_unlock_screen
}

#=== FUNCTION ==================================================================
# NAME: hide_map_notification
# DESCRIPTION: remove notification line befor map draw
#===============================================================================
function hide_map_notification() {
	labadmin_lock_screen
	cursor_save
	cursor_move-pos 4 $((5+${#labname}))
	echo -e "${S_DL}"
	cursor_restore
	labadmin_unlock_screen
}



#=== FUNCTION ==================================================================
# NAME: draw_map
# DESCRIPTION: draw ascii map with hosts, IPs and active marks found in local network
#
# PARAMETERS
#	[$1]	If present, draw selected hosts (from shosts)
#
# GLOBAL VARIABLES WRITTEN
#	map_pos
#===============================================================================
function draw_map() {
	nupdate_map=0
	local mark_selected="$1"							# If present mark selected cells
	local tab="    "									# Left tab
	local color_listen="$([ "$srvmode" = "winrm" ] && echo "${C_BB}" || echo "${C_BG}")"		# Color for listen ip

	if [ "$mark_selected" ]; then
		# Some hosts active: mark only actives
		if [ "$shosts_listen" ]; then
			local sel_bg_color="${B_B}"
			local ashosts="$shosts_listen"
		# All hosts inactive: mark all has inactive
		else
			local sel_bg_color="${B_R}"
			local ashosts="$shosts"
		fi
		eval local ashosts=($(echo "$ashosts" | sed 's/\([0-9]\+\)/[\1]=X/g'));	# Convert shosts list into array ([11]=X [12]=X ...)
	fi

	labadmin_lock_screen
	echo "${tab}┌"$(seq -s"─" $(($nc*6)) | tr -d "[0-9]")"┐"
	local cr=0														# Current row
	local complete="$(seq -s "__" 1 $nc | tr -s "[0-9]" " ")"		# Trick for complete rows with not all hosts defined

	IFS=$'\n\t '
	echo "$map" | while read row; do								# LOOP ROWS
		cr=$((cr+1))
		echo -n "$tab│"
		local cc=0													# Current column
		for n in $row $complete; do									# LOOP COLUMNS (print host number)
			[ "$((++cc-1))" -eq "$nc" ] && break
			if ! [ "$n" -eq "$n" ] &> /dev/null || [ ! "${macs[$n]}" ]; then
				echo -ne "     "
			elif [ "${macs[$n]}" ]; then
				[ "$mark_selected" ] && [ ${ashosts["$n"]} ] && echo -ne "$sel_bg_color"
				[ "${map_color[$n]}" ] && echo -ne "${map_color[$n]}"
				[ "${#n}" -le 2 ] && echo -n " "
				echo -ne " ${S_B}$n"
				[ "${#n}" -le 1 ] && echo -n " "
				[ "${#n}" -le 3 ] && echo -n " "
			fi
			echo -en "${S_R}│"
		done

		echo
		echo -n "${tab}│"
		local cc=0						# Current column
		for n in $row $complete; do		# LOOP COLUMNS (print ip)
			[ "$((++cc-1))" -eq "$nc" ] && break
			if ! [ "$n" -eq "$n" ] &> /dev/null || [ ! "${macs[$n]}" ]; then
				echo -ne "     │"
				continue;
			fi
			[ "$mark_selected" ] && [ ${ashosts["$n"]} ] && echo -ne "$sel_bg_color"
			local ip=$(echo ${ips[$n]} | cut -f 4 -d .)
			if [ "$ip" ]; then
				case "${hosts_status[$n]}" in
					listen)		echo -ne "${color_listen}.$(printf %03d $ip) ${S_R}│"	;;
					inactive)	echo -ne "${B_R}.$(printf %03d $ip) ${S_R}│"	;;
					off)		echo -ne "${C_BR}.$(printf %03d $ip) ${S_R}│"	;;
				esac
			else
				echo -ne "  ${C_BR}•${C_D}  ${S_R}│"
			fi
		done

		echo
		ei="├"; ed="┤"; [ $cr -eq "$nr" ] && ei="└" && ed="┘"
		echo "${tab}${ei}$(seq -s"─" $(($nc*6)) | tr -d "[0-9]")${ed}"
	done
	# Print IP
	ip="$(ip -o -4 address show dev "$iface" | awk '{print $4}' | head -1)"
	echo -en "${tab} ${C_N}${ip}${S_R}"
	# Print num selected hosts
	[ "$mark_selected" ] && echo -en "$(seq -s " " 1 "$((4+${nc}*6-5-${#ip}))" | tr -d "[0-9]")${sel_bg_color}${#ashosts[*]}${S_R}"
	echo

	labadmin_unlock_screen
	echo

}



#=== FUNCTION ==================================================================
# NAME: show_map_update
# DESCRIPTION: show update en the right of the map when a host is UP or DOWN
#
# PARAMETERS
#	$1	nhost
#	$2	event: up|down
#
# GLOBAL VARIABLES WRITTEN
#	nupdate_map		Position of the line updated (increment in each update)
#===============================================================================
function show_map_update() {
	nupdate_map=$((nupdate_map+1))
	local nhost="$1"		# nhost to show update
	local event="$2"		# Evento to show: up|down

	# Calculate position
	local col row 	
	if [ "$rparam" ]; then
		col=0; row=0
	else
		col="$(($nc*6+8))"
		row="$((4+nupdate_map))"
	fi
	if [ "$row" -gt "$LINES" ]; then	# screen too short -> write in two columns
		col=$((col+12))
		row=$((4+row-LINES))
	fi

	# Print update
	cursor_save
	cursor_move-pos "$row" "$col"
	case "$event" in
		up)		echo -e "${C_BG}▲${S_R} HOST ${nhost}"		;;
		down)	echo -e "${C_BR}▼${S_R} HOST ${nhost}"		;;
	esac
	cursor_restore
}



#=== FUNCTION ==================================================================
# NAME: select_range
# DESCRIPTION: ask user for a host range and save it in rhosts variable
#
# GLOBAL VARIALBES WRITTEN
#   rhosts			Selected range (no expanded)
#
# EXIT CODE
# 	1	if empty range selected
#	0	if any range selected (correct or not)
#===============================================================================
function select_range() {
	rhosts="h"
	while [[ "${rhosts,,}" == @(h|help) ]]; do
		echo -en "  > ${S_U}Select range (h for help)${S_R}:"
		read -e -p " " rhosts
		if [[ "${rhosts,,}" == @(h|help) ]]; then
			echo -e "    ${C_N}Range options:${S_R}"
			echo -e "      ${S_B}s|selected${S_R}    Keep selected hosts"
			echo -e "      ${S_B}a|all|*${S_R}       Select all hosts"
			echo -e "      ${S_B}11,23,51${S_R}      Select hosts 11 23 and 51"
			echo -e "      ${S_B}11-20${S_R}         Select hosts 11 to 20"
			echo -e "      ${S_B}2,3,11-15${S_R}     Select hosts 2 3 11 12 13 14 15"
			echo -e "      ${S_B}all /odd${S_R}      Select all odds hosts"
			echo -e "      ${S_B}11-20 /even${S_R}   Select hosts 12 14 16 18 20"
			echo
		fi
	done

	case "${rhosts,,}" in
		exit|quit) 	exit 0		;;
		"")			return 1	;;
		*)			return 0	;;
	esac
}




#=== FUNCTION ==================================================================
# NAME: expand_range
# DESCRIPTION: expands rhost range to list of selected hosts and write global 
#			   variables: shosts, shosts_listen and shosts_inactive
# 	EXAMPLE: 12,23,9,4-7 -> 12 23 9 4 5 6 7
#   EXAMPLE: 1-9 /odd    -> 1 3 5 7 9
#
# GLOBAL VARIALBES WRITTEN
#   shosts 				List (space separated) with all selected hosts numbers (range expanded)
#   shosts_listen 		List (space separated) with all selected host numbers with IP and listen
#   shosts_inactive 	List (space separated) with all selected host numbers selected with no IP found
#
# EXIT CODE
#	1	if no range selected
#===============================================================================
function expand_range() {
echo AAA $rhosts BBB $shosts
	# Keep previous selected hosts
	[[ "${rhosts,,}" == @(s|selected) ]] && [ "$shosts" ] && return 0
	
	unset shosts shosts_listen shosts_inactive

	# Check if /odd /even
	local mod2
	echo "$rhosts" | grep "/even *$" &>/dev/null && mod2=0
	echo "$rhosts" | grep "/odd *$" &>/dev/null && mod2=1

	# Select ALL
	if [[ "${rhosts,,}" == @(a|all*|ALL*|\*) ]]; then
		shosts="${!macs[@]}"
	# Expand list
	else
		# Expand range n-m to list
		for p in $(echo "$rhosts" | tr "," " "); do
			# Is a range:
			echo "$p" | grep -E "[0-9]"*-"[0-9]" &> /dev/null && shosts="$shosts $(eval echo {$(echo $p|sed "s/-/../")})"
			# Is a number:
			[ "$p" -eq 0 ] &>/dev/null; [ $? -le 1 ] && shosts="$shosts $p"
		done
	fi

	# Remove odds or evens and host not configured in macs[]
	local hosts_tmp
	for p in $shosts; do
		[ "$mod2" ] && [ $[p%2] -ne "$mod2" ] && continue		# Skip hosts no %mod2
		[ ! "${macs[$p]}" ] && continue							# Skip hosts without config MAC
		hosts_tmp="$hosts_tmp $p"
	done
	shosts="$hosts_tmp"

	[ ! "$shosts" ] && return 1

	# Update shosts_listen and shosts_inactive 
	for i in $shosts; do
		if [ "${ips[$i]}" ] && [ "${hosts_status[$i]}" = "listen" ]; then			
			shosts_listen="${shosts_listen} ${i}"
		else
			shosts_inactive="${shosts_inactive} ${i}"
		fi
	done
	shosts_listen=$(echo "$shosts_listen" | tr -s " ")
 	shosts_inactive=$(echo "$shosts_inactive" | tr -s " ")

 	[ ! "$shosts_listen" ] && [ ! "$shosts_inactive" ] && return 1
 	return 0
}
