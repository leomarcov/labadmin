#!/usr/bin/env bash
#===================================================================================
# LABADMIN IP LIB
#         FILE: labadmin_ip
#  DESCRIPTION: labadmin lib for manage host ip discover and arp table
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      VERSION: 2019.03
#      CREATED: 16.02.2017
#===================================================================================

#### EXTERNAL VARIABLES USED
# noninteractive
# ips[]
# macs[]
# iface
# arp_file
# sshport
# srvmode
# winrmport

#### GLOBAL VARIABLES
arp_file="${labadmin_tmp_path}/arpscan"					# Temp file for save arp-scan output
unset arp_table			                      			# Last arp_table scanned
unset ips				                      			# Array with all IPs found indexed by nhost
unset macs				                      			# Array with all macs of current config indexed by nhost
unset hosts_status		                      			# Array with last status of all hosts checked (inactive|listen|off) indexed by nhost



#=== FUNCTION ==================================================================
# NAME: init_arpfile
# DESCRIPTION: initilize arp_file global variable and arp file permissions
#
# GLOBAL VARIALBES WRITTEN
#	arp_file 		ARP file path (ssh or winrm location)
#===============================================================================
function init_arpfile() {
	arp_file="${arp_file}-$srvmode"
	
	[ -e "$arp_file" ] && return 
	touch "$arp_file"
	chmod a+rw "$arp_file"
}



#=== FUNCTION ==================================================================
# NAME: search_ips
# DESCRIPTION: search all IPs and macs in local network and:
#	- Fills the ips[] array with IPs for each mac in array macs[]
#	- Fills hosts_status[] array for each IP with 3 possible values:
#       * inactive: host respond to arp-scan but no is listening to ssh port
#       * listen: host respond and is listening to ssh port
#       * off: host not respond to arp-scan
#
# GLOBAL VARIALBES WRITTEN
#	ips[]	    	IP for each mac in macs[] found in local network
#	arp_table 		Macs of arp-scan not configured in ips[]
#	hosts_status[]	Status of each host: listen, inactive, off
#===============================================================================
function search_ips() {
	# Check if currently checking in background:
	[ "$arp_table" ] && pgrep "^arp-scan$|^nc$" &>/dev/null && return

	# ARP CHECK BEHAVIOR
	local arp_check="bg"
	# If Sparam no arp check, only use recent $arp_file
	if [ "$Sparam" ]; then
		arp_check="no"
	# If 0 IPs found AND arp_file is older than 10 minutes exec arp-scan in foreground
	elif [ ${#ips[*]} -eq 0 ] && ([ ! -e "$arp_file" ] || [ $((($(date +%s)-$(stat -c %Y "$arp_file"))/60)) -gt 10 ]); then
		arp_check="fg"
	fi

	# Show notifiction messaage before map
	[ ! "$noninteractive" ] && [ "$arp_check" != "no" ] && show_map_notification "Scanning $iface"

	# Check arp in foreground at beginin
	[ "$arp_check" = "fg" ] && update_arpscan

	# Read last arp_file content
	arp_table=$(cat "$arp_file")

	# Update status for each IP
		# inactive: found line "IP MAC inactive"
		# listen: found "IP MAC"
		# off: no found line with MAC
	for n in ${!macs[@]}; do
		local mac=${macs[$n]}
		[ ! "$mac" ] && continue
		local ip=$(echo "$arp_table" | grep -i "$mac" | tail -1)
		if [ "$ip" ]; then
			ips[$n]=$(echo $ip | awk '{print $1}')
			if $(echo "$ip" | grep -q "inactive"); then
				hosts_status[$n]="inactive"
			else
				hosts_status[$n]="listen"
			fi
		else
			hosts_status[$n]="off"
		fi
	done

	# Check arp in background at ending
	if [ "$arp_check" = "bg" ]; then
		update_arpscan &
	fi
}



#=== FUNCTION ==================================================================
# NAME: update_arpscan
# DESCRIPTION: checks for news ips-macs and inactive hosts (powered-on but no listening)
#	           in local network and save it to $arp_file
#
# FILES WRITTEN
#	$arp_file	arp-scan output and for each inactive host one line at end with: <ip> <mac> inactive
#===============================================================================
function update_arpscan() {
	local arp_out
	scan_timeout=${scan_timeout:-500}
	arp_out="$(arp-scan -l -I $iface -q -r 1 -N -t $scan_timeout)" 	# In background is better to avoid > directly
	[ $? -ne 0 ] && labadmin_error "    ! Failed to scan network hosts (arp-scan exit error)" 1 
	arp_out="${arp_out}"$'\n'"${ipadmin}"$'\t'"${macadmin}"		# Add admin ip mac (allow select admin if is present in lab config file)
	echo "${arp_out}" > "$arp_file"

	# Background message position: next to map or 0,0 if no map showed (-r param)
	local bgmsg_col=0
	local bgmsg_row=0
	if [ ! "$rparam" ]; then
		bgmsg_col="$(($nc*6+9))"
		bgmsg_row=5
	fi

	# Check for inactive hosts (poweredON but no listening in $sshport) in background
	local port="$(eval echo "\${${srvmode}port}")"
	labadmin_lock_screen
	for n in ${!macs[@]}; do
		local mac=${macs[$n]}
		local ip=$(echo "$arp_out" | grep -i "$mac" | awk '{print $1}'| head -1)

		# Show map update if status change in any host
		[ ! "$ip" ] && [ "${hosts_status[$n]}" = "listen" ] && show_map_update "$n" "down"
		[ "$ip" ] && [ "${hosts_status[$n]}" = "off" ] && show_map_update "$n" "up"

		# If IP but inactive host append the line with 'inactive' mark to $arp_file
		[ ! "$ip" ] && continue
		(nc -z -w 1 "$ip" "$port" &> /dev/null || echo "$ip $mac inactive" >> "$arp_file")&
	done
	labadmin_unlock_screen

	# Remove notifiction messaage before map
	[ ! "$noninteractive" ] && [ "$arp_check" != "no" ] && hide_map_notification &
}




